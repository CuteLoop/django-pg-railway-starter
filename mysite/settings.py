"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# --------------------------------------------------------------
# BASE & ENV
# --------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# You should set these environment variables in production
# For example:
# SECRET_KEY=<your-production-secret>
# DEBUG=False
# ALLOWED_HOSTS=".example.com,localhost"
SECRET_KEY = os.environ.get("SECRET_KEY", "django-insecure-dev-key")
DEBUG = os.environ.get("DEBUG", "True") == "True"

# ALLOWED_HOSTS should be a comma-separated list in production
# e.g. ALLOWED_HOSTS="your-domain.com,your-other-domain.com"
allowed_hosts_env = os.environ.get("ALLOWED_HOSTS", "*")
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_env.split(",") if host.strip()]

# If you're serving forms/admin over HTTPS, set your domain here for CSRF protection
# e.g. CSRF_TRUSTED_ORIGINS=["https://*.example.com"]
CSRF_TRUSTED_ORIGINS = ["https://vdancehub-production.up.railway.app/"]
# If you'd like to load from an env variable, do:
# CSRF_TRUSTED_ORIGINS = os.environ.get("CSRF_TRUSTED_ORIGINS", "").split(",")

# --------------------------------------------------------------
# APPLICATION DEFINITION
# --------------------------------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    ## Required by django-allauth
    'django.contrib.sites',  # Must be added

    # allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # My apps

    'home',
    'users.apps.UsersConfig',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise middleware for serving static files in production
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # <-- Add this line
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # your custom templates directory

        'DIRS': [
            # You can add a custom templates directory if you have one:
            # BASE_DIR / "templates",
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# --------------------------------------------------------------
# DATABASE CONFIGURATION
# --------------------------------------------------------------
# By default, uses Postgres settings from environment variables
# If you want a fallback for local dev, change the defaults below

import dj_database_url

if os.environ.get('DATABASE_URL'):
    DATABASES = {
        'default': dj_database_url.config(default=os.environ.get('DATABASE_URL'))
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

'''DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ["PGDATABASE"],
        'USER': os.environ["PGUSER"],
        'PASSWORD': os.environ["PGPASSWORD"],
        'HOST': os.environ["PGHOST"],
        'PORT': os.environ["PGPORT"],
    }
}'''

# --------------------------------------------------------------
# PASSWORD VALIDATION
# --------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# --------------------------------------------------------------
# INTERNATIONALIZATION
# --------------------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# --------------------------------------------------------------
# STATIC FILES
# --------------------------------------------------------------
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"]

# Enable Gzip or Brotli compression and cache headers with WhiteNoise
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# --------------------------------------------------------------
# DEFAULT PRIMARY KEY FIELD TYPE
# --------------------------------------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




##### Allauth settings #####

SITE_ID = 1
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Default Django auth
    'allauth.account.auth_backends.AuthenticationBackend',  # allauth backend
)

# Redirect URLs

AUTH_USER_MODEL = 'users.CustomUser'



LOGIN_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'

# Email verification (set to "none" for development)
ACCOUNT_EMAIL_VERIFICATION = "none"  
ACCOUNT_EMAIL_REQUIRED = True

# Optional: Customize the signup form fields, etc.
ACCOUNT_USERNAME_REQUIRED = False


ACCOUNT_FORMS = {
    'signup': 'users.forms.CustomSignupForm',
}






# --------------------------------------------------------------
# SECURITY RECOMMENDATIONS (Production)
# --------------------------------------------------------------
# If you are behind a reverse proxy that uses HTTPS, set this:
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# If you want to enforce HTTPS in production (recommended):
# SECURE_SSL_REDIRECT = not DEBUG

# If you need HSTS:
# SECURE_HSTS_SECONDS = 31536000  # 1 year
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True

# X-Frame-Options sets if your site can be embedded in an iframe
# X_FRAME_OPTIONS = "DENY"
